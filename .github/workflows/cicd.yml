name: CI/CD

on:
  schedule:
    - cron: "*/10 * * * *" # Runs every 10 minutes
    #- cron: "0 * * * *" # Runs every hour

jobs:
  stage1:
    name: Set Variables
    runs-on: ubuntu-latest
    outputs:
      portfolio_id: ${{ steps.set-vars.outputs.portfolio_id }}
      trig_update_weights_job1: ${{ steps.set-vars.outputs.trig_update_weights_job1 }}
      trig_update_weights_job2: ${{ steps.set-vars.outputs.trig_update_weights_job2 }}
      trig_update_weights_job3: ${{ steps.set-vars.outputs.trig_update_weights_job3 }}
      trig_update_weights_job4: ${{ steps.set-vars.outputs.trig_update_weights_job4 }}
      trig_meth_exp: ${{ steps.set-vars.outputs.trig_meth_exp }}
    steps:
      - name: Calculate Minutes Offset
        id: minute-offset
        run: |
          START_TIME="$(date -d "$(date +%Y-%m-%dT00:00:00Z)" +%s)"
          CURRENT_TIME="$(date +%s)"
          ELAPSED_MINUTES=$(( (CURRENT_TIME - START_TIME) / 60 ))
          echo "::set-output name=elapsed_minutes::$ELAPSED_MINUTES"

      - name: Set Variables
        id: set-vars
        run: |

          echo "::set-output name=trig_update_weights_job1::false"

          ELAPSED_MINUTES=${{ steps.minute-offset.outputs.elapsed_minutes }}

          # Set trig_update_weights for job2
          if (( ELAPSED_MINUTES % 10 == 0 )); then
            echo "::set-vars name=trig_update_weights_job2::true"
          else
            echo "::set-vars name=trig_update_weights_job2::false"
          fi

          # Set trig_update_weights for job3
          if (( ELAPSED_MINUTES % 20 == 0 )); then
            echo "::set-vars name=trig_update_weights_job3::true"
          else
            echo "::set-vars name=trig_update_weights_job3::false"
          fi

          # Set trig_update_weights for job4
          if (( ELAPSED_MINUTES % 30 == 0 )); then
            echo "::set-vars name=trig_update_weights_job4::true"
          else
            echo "::set-vars name=trig_update_weights_job4::false"
          fi

  stage2:
    name: Stage 2 - Update Portfolios
    needs: stage1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job_name: [portfolio_lan, portfolio_ed_daily, portfolio_ed_weekly, portfolio_ed_monthly]
        portfolio_id: [1, 2, 3, 4]
        trig_meth_exp: [false, true, false, true]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: ðŸ“¦ Install Poetry
        uses: snok/install-poetry@v1
      - name: ðŸ“¦ Install dependencies
        run: poetry install     
      - name: Run Portfolio Update Function
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          # Map dynamic TRIG_UPDATE_WEIGHTS from Stage 1 outputs
          if [[ "${{ matrix.job_name }}" == "portfolio_lan" ]]; then
            TRIG_UPDATE_WEIGHTS="${{ needs.stage1.outputs.trig_update_weights_job1 }}"
          elif [[ "${{ matrix.job_name }}" == "portfolio_ed_daily" ]]; then
            TRIG_UPDATE_WEIGHTS="${{ needs.stage1.outputs.trig_update_weights_job2 }}"
          elif [[ "${{ matrix.job_name }}" == "portfolio_ed_weekly" ]]; then
            TRIG_UPDATE_WEIGHTS="${{ needs.stage1.outputs.trig_update_weights_job3 }}"
          elif [[ "${{ matrix.job_name }}" == "portfolio_ed_monthly" ]]; then
            TRIG_UPDATE_WEIGHTS="${{ needs.stage1.outputs.trig_update_weights_job4 }}"
          fi

          poetry run python -m test_app_cicd \
            ${{ matrix.portfolio_id }} \
            $(( $TRIG_UPDATE_WEIGHTS == 'true' ? 1 : 0 )) \
            $(( ${{ matrix.trig_meth_exp }} == 'true' ? 1 : 0 )) \
            $DB_USERNAME \
            $DB_PASSWORD \
            $DB_HOST \
            $DB_PORT \
            $DB_NAME
